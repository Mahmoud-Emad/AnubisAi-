package handlers

import (
	"bytes"
	"encoding/json"
	"net/http/httptest"
	"testing"
	"time"

	"anubis-backend/config"
	"anubis-backend/database"
	"anubis-backend/services"

	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func setupTestApp(t *testing.T) *fiber.App {
	// Setup test database
	cfg := &config.Config{
		Database: config.DatabaseConfig{
			Type: "sqlite",
			Host: ":memory:",
		},
		JWT: config.JWTConfig{
			Secret: "test-secret-key-for-testing-only",
			Expiry: 24 * time.Hour,
		},
		TFGrid: config.TFGridConfig{
			Network: "test",
		},
	}

	err := database.InitDatabase(cfg)
	require.NoError(t, err)

	err = database.RunMigrations()
	require.NoError(t, err)

	// Initialize auth service
	InitAuthService(cfg)

	// Create Fiber app
	app := fiber.New()

	// Setup routes
	app.Post("/auth/register", RegisterV2)
	app.Post("/auth/login", LoginV2)
	app.Get("/auth/validate", ValidateTokenV2)
	app.Post("/auth/logout", LogoutV2)
	app.Get("/auth/network", GetNetworkInfo)

	return app
}

func TestRegisterV2_ExistingWallet(t *testing.T) {
	app := setupTestApp(t)

	// Test registration with existing wallet
	reqBody := services.RegisterRequest{
		FirstName: "John",
		LastName:  "Doe",
		Email:     "john.doe@example.com",
		Password:  "securepassword123",
		Username:  "johndoe",
		Mnemonic:  "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about",
	}

	jsonBody, err := json.Marshal(reqBody)
	require.NoError(t, err)

	req := httptest.NewRequest("POST", "/auth/register", bytes.NewReader(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusCreated, resp.StatusCode)

	var response services.AuthResponse
	err = json.NewDecoder(resp.Body).Decode(&response)
	require.NoError(t, err)

	assert.True(t, response.Success)
	assert.NotEmpty(t, response.Token)
	assert.NotNil(t, response.User)
	assert.NotNil(t, response.WalletInfo)
	assert.True(t, response.User.HasWallet)
	assert.Equal(t, "john.doe@example.com", response.User.Email)
	assert.Equal(t, "johndoe", response.User.Username)
	assert.NotEmpty(t, response.User.WalletAddress)
}

func TestRegisterV2_AutoGeneratedWallet(t *testing.T) {
	app := setupTestApp(t)

	// Test registration without mnemonic (auto-generated wallet)
	reqBody := services.RegisterRequest{
		FirstName: "Jane",
		LastName:  "Smith",
		Email:     "jane.smith@example.com",
		Password:  "anothersecurepass456",
		Username:  "janesmith",
		// No mnemonic - should auto-generate wallet
	}

	jsonBody, err := json.Marshal(reqBody)
	require.NoError(t, err)

	req := httptest.NewRequest("POST", "/auth/register", bytes.NewReader(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusCreated, resp.StatusCode)

	var response services.AuthResponse
	err = json.NewDecoder(resp.Body).Decode(&response)
	require.NoError(t, err)

	assert.True(t, response.Success)
	assert.NotEmpty(t, response.Token)
	assert.NotNil(t, response.User)
	assert.NotNil(t, response.WalletInfo)
	assert.False(t, response.User.HasWallet) // Auto-generated wallet
	assert.Equal(t, "jane.smith@example.com", response.User.Email)
	assert.Equal(t, "janesmith", response.User.Username)
	assert.NotEmpty(t, response.User.WalletAddress)
}

func TestRegisterV2_ValidationErrors(t *testing.T) {
	app := setupTestApp(t)

	testCases := []struct {
		name           string
		reqBody        services.RegisterRequest
		expectedStatus int
	}{
		{
			name: "Invalid email format",
			reqBody: services.RegisterRequest{
				FirstName: "John",
				LastName:  "Doe",
				Email:     "invalid-email",
				Password:  "securepass123",
				Username:  "johndoe",
			},
			expectedStatus: fiber.StatusBadRequest,
		},
		{
			name: "Password too short",
			reqBody: services.RegisterRequest{
				FirstName: "John",
				LastName:  "Doe",
				Email:     "john@example.com",
				Password:  "short",
				Username:  "johndoe",
			},
			expectedStatus: fiber.StatusBadRequest,
		},
		{
			name: "Invalid first name",
			reqBody: services.RegisterRequest{
				FirstName: "John123",
				LastName:  "Doe",
				Email:     "john@example.com",
				Password:  "securepass123",
				Username:  "johndoe",
			},
			expectedStatus: fiber.StatusBadRequest,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			jsonBody, err := json.Marshal(tc.reqBody)
			require.NoError(t, err)

			req := httptest.NewRequest("POST", "/auth/register", bytes.NewReader(jsonBody))
			req.Header.Set("Content-Type", "application/json")

			resp, err := app.Test(req, -1)
			require.NoError(t, err)

			assert.Equal(t, tc.expectedStatus, resp.StatusCode)

			var errorResponse ErrorResponse
			err = json.NewDecoder(resp.Body).Decode(&errorResponse)
			require.NoError(t, err)

			assert.NotEmpty(t, errorResponse.Error)
			assert.NotEmpty(t, errorResponse.Message)
		})
	}
}

func TestLoginV2_Success(t *testing.T) {
	app := setupTestApp(t)

	// First register a user
	registerReq := services.RegisterRequest{
		FirstName: "Test",
		LastName:  "User",
		Email:     "test@example.com",
		Password:  "testpassword123",
		Username:  "testuser",
	}

	jsonBody, err := json.Marshal(registerReq)
	require.NoError(t, err)

	req := httptest.NewRequest("POST", "/auth/register", bytes.NewReader(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err := app.Test(req, -1)
	require.NoError(t, err)
	require.Equal(t, fiber.StatusCreated, resp.StatusCode)

	// Now test login
	loginReq := services.LoginRequest{
		Email:    "test@example.com",
		Password: "testpassword123",
	}

	jsonBody, err = json.Marshal(loginReq)
	require.NoError(t, err)

	req = httptest.NewRequest("POST", "/auth/login", bytes.NewReader(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err = app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusOK, resp.StatusCode)

	var response services.AuthResponse
	err = json.NewDecoder(resp.Body).Decode(&response)
	require.NoError(t, err)

	assert.True(t, response.Success)
	assert.NotEmpty(t, response.Token)
	assert.NotNil(t, response.User)
	assert.Equal(t, "test@example.com", response.User.Email)
	assert.Equal(t, "testuser", response.User.Username)
}

func TestLoginV2_InvalidCredentials(t *testing.T) {
	app := setupTestApp(t)

	// Test login with invalid credentials
	loginReq := services.LoginRequest{
		Email:    "nonexistent@example.com",
		Password: "wrongpassword",
	}

	jsonBody, err := json.Marshal(loginReq)
	require.NoError(t, err)

	req := httptest.NewRequest("POST", "/auth/login", bytes.NewReader(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusUnauthorized, resp.StatusCode)

	var errorResponse ErrorResponse
	err = json.NewDecoder(resp.Body).Decode(&errorResponse)
	require.NoError(t, err)

	assert.Equal(t, "Authentication failed", errorResponse.Error)
	assert.Contains(t, errorResponse.Message, "invalid email or password")
}

func TestValidateTokenV2_Success(t *testing.T) {
	app := setupTestApp(t)

	// Register and get token
	registerReq := services.RegisterRequest{
		FirstName: "Token",
		LastName:  "Test",
		Email:     "token@example.com",
		Password:  "tokentest123",
		Username:  "tokentest",
	}

	jsonBody, err := json.Marshal(registerReq)
	require.NoError(t, err)

	req := httptest.NewRequest("POST", "/auth/register", bytes.NewReader(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	var registerResponse services.AuthResponse
	err = json.NewDecoder(resp.Body).Decode(&registerResponse)
	require.NoError(t, err)
	require.NotEmpty(t, registerResponse.Token)

	// Test token validation
	req = httptest.NewRequest("GET", "/auth/validate", nil)
	req.Header.Set("Authorization", "Bearer "+registerResponse.Token)

	resp, err = app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusOK, resp.StatusCode)

	var validateResponse map[string]interface{}
	err = json.NewDecoder(resp.Body).Decode(&validateResponse)
	require.NoError(t, err)

	assert.True(t, validateResponse["valid"].(bool))
	assert.NotNil(t, validateResponse["user"])
}

func TestValidateTokenV2_InvalidToken(t *testing.T) {
	app := setupTestApp(t)

	// Test with invalid token
	req := httptest.NewRequest("GET", "/auth/validate", nil)
	req.Header.Set("Authorization", "Bearer invalid.jwt.token")

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusUnauthorized, resp.StatusCode)

	var errorResponse ErrorResponse
	err = json.NewDecoder(resp.Body).Decode(&errorResponse)
	require.NoError(t, err)

	assert.Equal(t, "Invalid token", errorResponse.Error)
}

func TestValidateTokenV2_MissingToken(t *testing.T) {
	app := setupTestApp(t)

	// Test without Authorization header
	req := httptest.NewRequest("GET", "/auth/validate", nil)

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusUnauthorized, resp.StatusCode)

	var errorResponse ErrorResponse
	err = json.NewDecoder(resp.Body).Decode(&errorResponse)
	require.NoError(t, err)

	assert.Equal(t, "Authorization required", errorResponse.Error)
}

func TestGetNetworkInfo(t *testing.T) {
	app := setupTestApp(t)

	req := httptest.NewRequest("GET", "/auth/network", nil)

	resp, err := app.Test(req, -1)
	require.NoError(t, err)

	assert.Equal(t, fiber.StatusOK, resp.StatusCode)

	var networkInfo map[string]interface{}
	err = json.NewDecoder(resp.Body).Decode(&networkInfo)
	require.NoError(t, err)

	assert.Equal(t, "test", networkInfo["network"])
	assert.Equal(t, "tfchain-testnet", networkInfo["chain_id"])
	assert.Equal(t, "active", networkInfo["status"])
}
