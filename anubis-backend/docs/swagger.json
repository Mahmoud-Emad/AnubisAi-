{
    "swagger": "2.0",
    "info": {
        "description": "A comprehensive core backend API for the Anubis AI platform with ThreeFold Grid integration\nThis API provides endpoints for user management, task execution, AI memory management, and platform services.",
        "title": "Anubis AI Core-Backend API",
        "contact": {
            "name": "Anubis AI Support",
            "email": "support@anubis.ai"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/auth/refresh": {
            "post": {
                "description": "Get a new JWT token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Refresh token request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User sign in",
                "parameters": [
                    {
                        "description": "Sign in credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User sign up",
                "parameters": [
                    {
                        "description": "Sign up information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.SignUpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/available-tasks": {
            "get": {
                "description": "Returns a comprehensive list of all supported ThreeFold Grid tasks with detailed documentation\nEach task includes parameter specifications, examples, and usage information for API consumers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get available tasks",
                "responses": {
                    "200": {
                        "description": "List of available tasks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.AvailableTasksResponse"
                        }
                    }
                }
            }
        },
        "/execute-task": {
            "post": {
                "description": "Execute a ThreeFold Grid task with comprehensive validation and error handling\nThis endpoint processes task execution requests, validates parameters, logs execution history, and returns detailed results",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Execute a task",
                "parameters": [
                    {
                        "description": "Task execution request with task name and parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExecuteTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task executed successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExecuteTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or parameters",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during task execution",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health-check": {
            "get": {
                "description": "Returns the health status of the API and its dependencies including database connectivity and service status\nThis endpoint is used by load balancers and monitoring systems to determine if the service is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/home": {
            "get": {
                "description": "Returns comprehensive information about the Anubis AI Core-Backend API including available endpoints and system info\nThis endpoint provides an overview of the API capabilities and serves as a discovery endpoint for clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "general"
                ],
                "summary": "API home endpoint",
                "responses": {
                    "200": {
                        "description": "API information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.HomeResponse"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "description": "Send password reset email to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Password reset request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current user's profile information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Update user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/memories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all memories for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user memories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserMemoriesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new memory for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user memory",
                "parameters": [
                    {
                        "description": "Create memory request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserMemory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all settings for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserSettingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a specific setting for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user setting",
                "parameters": [
                    {
                        "description": "Update setting request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSettingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AvailableTasksResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Total number of available tasks",
                    "type": "integer",
                    "example": 2
                },
                "request_id": {
                    "description": "Request identifier",
                    "type": "string",
                    "example": "req_123456789"
                },
                "tasks": {
                    "description": "Available tasks with full documentation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.TaskInfo"
                    }
                },
                "timestamp": {
                    "description": "Response timestamp",
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "handlers.CreateMemoryRequest": {
            "type": "object",
            "required": [
                "content",
                "title"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 200
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "High-level error category",
                    "type": "string",
                    "example": "Bad Request"
                },
                "message": {
                    "description": "Detailed error description",
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "path": {
                    "description": "Request path that caused the error",
                    "type": "string",
                    "example": "/api/v1/users"
                },
                "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string",
                    "example": "req_123456789"
                },
                "timestamp": {
                    "description": "When the error occurred",
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "handlers.ExecuteTaskRequest": {
            "type": "object"
        },
        "handlers.ExecuteTaskResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Task result data (on success)"
                },
                "duration_ms": {
                    "description": "Execution time in milliseconds",
                    "type": "integer",
                    "example": 150
                },
                "error": {
                    "description": "Error message (on failure)",
                    "type": "string",
                    "example": "farm_id parameter is required"
                },
                "request_id": {
                    "description": "Request identifier for tracing",
                    "type": "string",
                    "example": "req_123456789"
                },
                "status": {
                    "description": "Execution status (success/failed)",
                    "type": "string",
                    "example": "success"
                },
                "task_id": {
                    "description": "Unique task execution ID",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "timestamp": {
                    "description": "Execution timestamp",
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "request_id": {
                    "description": "Request identifier",
                    "type": "string",
                    "example": "req_123456789"
                },
                "services": {
                    "description": "Individual service statuses",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Overall system status",
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "description": "Health check timestamp",
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "uptime": {
                    "description": "System uptime",
                    "type": "string",
                    "example": "2h30m15s"
                },
                "version": {
                    "description": "API version",
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "handlers.HomeResponse": {
            "type": "object",
            "properties": {
                "api": {
                    "description": "API name",
                    "type": "string",
                    "example": "Anubis AI Core-Backend"
                },
                "endpoints": {
                    "description": "Available API endpoints",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "environment": {
                    "description": "Current environment",
                    "type": "string",
                    "example": "development"
                },
                "framework": {
                    "description": "Web framework info",
                    "type": "string",
                    "example": "Fiber v2.52.0"
                },
                "message": {
                    "description": "Welcome message",
                    "type": "string",
                    "example": "Welcome to Anubis AI Core-Backend API"
                },
                "request_id": {
                    "description": "Request identifier",
                    "type": "string",
                    "example": "req_123456789"
                },
                "timestamp": {
                    "description": "Response timestamp",
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "version": {
                    "description": "API version",
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "handlers.PaginationMeta": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "handlers.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "handlers.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.SignInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User email address (required, must be valid email)",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User password (required, minimum 8 characters)",
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "handlers.SignInResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserInfo"
                }
            }
        },
        "handlers.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "handlers.SignUpResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserInfo"
                }
            }
        },
        "handlers.TaskInfo": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Task category for organization",
                    "type": "string",
                    "example": "farms"
                },
                "description": {
                    "description": "Human-readable description",
                    "type": "string",
                    "example": "List ThreeFold farms"
                },
                "example": {
                    "description": "Usage example",
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "description": "Task identifier",
                    "type": "string",
                    "example": "list_farms"
                },
                "parameters": {
                    "description": "Parameter specifications",
                    "type": "object",
                    "additionalProperties": true
                },
                "version": {
                    "description": "Task version for compatibility",
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "handlers.UpdateSettingRequest": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "handlers.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.UserMemoriesResponse": {
            "type": "object",
            "properties": {
                "memories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.UserMemory"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.PaginationMeta"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "handlers.UserMemory": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handlers.UserProfileResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "$ref": "#/definitions/handlers.UserStats"
                },
                "timestamp": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserInfo"
                }
            }
        },
        "handlers.UserSetting": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "handlers.UserSettingsResponse": {
            "type": "object",
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.UserSetting"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "handlers.UserStats": {
            "type": "object",
            "properties": {
                "account_created": {
                    "type": "string"
                },
                "last_activity": {
                    "type": "string"
                },
                "memories_stored": {
                    "type": "integer"
                },
                "tasks_executed": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}