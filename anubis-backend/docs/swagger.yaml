basePath: /
definitions:
  handlers.AvailableTasksResponse:
    properties:
      count:
        description: Total number of available tasks
        example: 2
        type: integer
      request_id:
        description: Request identifier
        example: req_123456789
        type: string
      tasks:
        description: Available tasks with full documentation
        items:
          $ref: '#/definitions/handlers.TaskInfo'
        type: array
      timestamp:
        description: Response timestamp
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  handlers.CreateMemoryRequest:
    properties:
      content:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 200
        type: string
    required:
    - content
    - title
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        description: High-level error category
        example: Bad Request
        type: string
      message:
        description: Detailed error description
        example: Invalid request parameters
        type: string
      path:
        description: Request path that caused the error
        example: /api/v1/users
        type: string
      request_id:
        description: Unique request identifier for tracing
        example: req_123456789
        type: string
      timestamp:
        description: When the error occurred
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  handlers.ExecuteTaskRequest:
    type: object
  handlers.ExecuteTaskResponse:
    properties:
      data:
        description: Task result data (on success)
      duration_ms:
        description: Execution time in milliseconds
        example: 150
        type: integer
      error:
        description: Error message (on failure)
        example: farm_id parameter is required
        type: string
      request_id:
        description: Request identifier for tracing
        example: req_123456789
        type: string
      status:
        description: Execution status (success/failed)
        example: success
        type: string
      task_id:
        description: Unique task execution ID
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      timestamp:
        description: Execution timestamp
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  handlers.HealthResponse:
    properties:
      request_id:
        description: Request identifier
        example: req_123456789
        type: string
      services:
        additionalProperties:
          type: string
        description: Individual service statuses
        type: object
      status:
        description: Overall system status
        example: healthy
        type: string
      timestamp:
        description: Health check timestamp
        example: "2024-01-01T12:00:00Z"
        type: string
      uptime:
        description: System uptime
        example: 2h30m15s
        type: string
      version:
        description: API version
        example: 1.0.0
        type: string
    type: object
  handlers.HomeResponse:
    properties:
      api:
        description: API name
        example: Anubis Backend
        type: string
      endpoints:
        description: Available API endpoints
        items:
          type: string
        type: array
      environment:
        description: Current environment
        example: development
        type: string
      framework:
        description: Web framework info
        example: Fiber v2.52.0
        type: string
      message:
        description: Welcome message
        example: Welcome to Anubis AI Core-Backend API
        type: string
      request_id:
        description: Request identifier
        example: req_123456789
        type: string
      timestamp:
        description: Response timestamp
        example: "2024-01-01T12:00:00Z"
        type: string
      version:
        description: API version
        example: 1.0.0
        type: string
    type: object
  handlers.PaginationMeta:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handlers.RefreshTokenResponse:
    properties:
      expires_at:
        type: string
      success:
        type: boolean
      token:
        type: string
    type: object
  handlers.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handlers.ResetPasswordResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.SignInRequest:
    properties:
      email:
        description: User email address (required, must be valid email)
        example: user@example.com
        type: string
      password:
        description: User password (required, minimum 8 characters)
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  handlers.SignInResponse:
    properties:
      expires_at:
        type: string
      refresh_token:
        type: string
      success:
        type: boolean
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserInfo'
    type: object
  handlers.SignUpRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        maxLength: 100
        minLength: 1
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  handlers.SignUpResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
      user:
        $ref: '#/definitions/handlers.UserInfo'
    type: object
  handlers.TaskInfo:
    properties:
      category:
        description: Task category for organization
        example: farms
        type: string
      description:
        description: Human-readable description
        example: List ThreeFold farms
        type: string
      example:
        additionalProperties: true
        description: Usage example
        type: object
      name:
        description: Task identifier
        example: list_farms
        type: string
      parameters:
        additionalProperties: true
        description: Parameter specifications
        type: object
      version:
        description: Task version for compatibility
        example: "1.0"
        type: string
    type: object
  handlers.UpdateSettingRequest:
    properties:
      key:
        type: string
      value:
        type: string
    required:
    - key
    - value
    type: object
  handlers.UpdateUserRequest:
    properties:
      first_name:
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        maxLength: 100
        minLength: 1
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  handlers.UserInfo:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_admin:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
  handlers.UserMemoriesResponse:
    properties:
      memories:
        items:
          $ref: '#/definitions/handlers.UserMemory'
        type: array
      pagination:
        $ref: '#/definitions/handlers.PaginationMeta'
      timestamp:
        type: string
    type: object
  handlers.UserMemory:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  handlers.UserProfileResponse:
    properties:
      stats:
        $ref: '#/definitions/handlers.UserStats'
      timestamp:
        type: string
      user:
        $ref: '#/definitions/handlers.UserInfo'
    type: object
  handlers.UserSetting:
    properties:
      id:
        type: string
      key:
        type: string
      value:
        type: string
    type: object
  handlers.UserSettingsResponse:
    properties:
      settings:
        items:
          $ref: '#/definitions/handlers.UserSetting'
        type: array
      timestamp:
        type: string
    type: object
  handlers.UserStats:
    properties:
      account_created:
        type: string
      last_activity:
        type: string
      memories_stored:
        type: integer
      tasks_executed:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@anubis.ai
    name: Anubis AI Support
  description: |-
    A comprehensive core backend API for the Anubis AI platform with ThreeFold Grid integration
    This API provides endpoints for user management, task execution, AI memory management, and platform services.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Anubis AI Core-Backend API
  version: 1.0.0
paths:
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new JWT token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Sign in credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User sign in
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Sign up information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User sign up
      tags:
      - auth
  /available-tasks:
    get:
      description: |-
        Returns a comprehensive list of all supported ThreeFold Grid tasks with detailed documentation
        Each task includes parameter specifications, examples, and usage information for API consumers
      produces:
      - application/json
      responses:
        "200":
          description: List of available tasks retrieved successfully
          schema:
            $ref: '#/definitions/handlers.AvailableTasksResponse'
      summary: Get available tasks
      tags:
      - tasks
  /execute-task:
    post:
      consumes:
      - application/json
      description: |-
        Execute a ThreeFold Grid task with comprehensive validation and error handling
        This endpoint processes task execution requests, validates parameters, logs execution history, and returns detailed results
      parameters:
      - description: Task execution request with task name and parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ExecuteTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task executed successfully
          schema:
            $ref: '#/definitions/handlers.ExecuteTaskResponse'
        "400":
          description: Invalid request or parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error during task execution
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Execute a task
      tags:
      - tasks
  /health-check:
    get:
      description: |-
        Returns the health status of the API and its dependencies including database connectivity and service status
        This endpoint is used by load balancers and monitoring systems to determine if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
        "503":
          description: Service is unhealthy
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Health check endpoint
      tags:
      - health
  /home:
    get:
      description: |-
        Returns comprehensive information about the Anubis AI Core-Backend API including available endpoints and system info
        This endpoint provides an overview of the API capabilities and serves as a discovery endpoint for clients
      produces:
      - application/json
      responses:
        "200":
          description: API information retrieved successfully
          schema:
            $ref: '#/definitions/handlers.HomeResponse'
      summary: API home endpoint
      tags:
      - general
  /reset-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /user:
    get:
      description: Get the current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update the current user's profile information
      parameters:
      - description: Update user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
  /user/memories:
    get:
      description: Get all memories for the current user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserMemoriesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user memories
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new memory for the current user
      parameters:
      - description: Create memory request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateMemoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserMemory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user memory
      tags:
      - user
  /user/settings:
    get:
      description: Get all settings for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserSettingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user settings
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a specific setting for the current user
      parameters:
      - description: Update setting request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateSettingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserSetting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user setting
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
      Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
